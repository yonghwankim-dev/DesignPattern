### **스테이트 패턴과 스트래티지 패턴의 비교**

스테이트 패턴에서 클라이언트는 상태 객체와 관련된 어떠한 지식도 없다.

예를 들어 Client 클래스의 행위는 다음과 같다고 가정한다.

```java
public class Client {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Light light = new Light();
		light.off_button_pushed();
		light.on_button_pushed();
		light.off_button_pushed();
	}
}
```

위 코드에서는 상태를 알 수 있는 단서를 발견할 수 없다. 단순히 Light 클래스의 메서드(on 또는 off)를 호출할 뿐이다.

스트래티지 패턴에서도 스테이트 패턴과 같이 실행 중에 자신의 행위를 변경할 수 있다. 그러나 **스테이트 패턴에서는 행위가 자주 변경되지만 스트래티지 패턴에서는 Context 요소에서 행위(즉, 전략)가 한번 고정되면 자주 변경되지 않는다.**

두번째는 행위를 변경하는 주체가 스테이트 패턴과는 다르다. **스테이트 패턴에서는 상태 변경을 State 요소를 구현한 클래스 자신이 수행하지만 스트래티지 패턴에서는 Client 클래스가 수행한다.**

예를 들어 위 코드의 스테이트 패턴에서 상태 변경은 State 요소를 구현한 클래스인 State 클래스의 자식 클래스들이 수행(ON 또는 OFF 클래스)하지만 스트래티지 패턴에서는 Client 클래스가 수행한다. 즉, 행위 시작과 변경이 Client 클래스에서 이루어지며 통제된다. Client 클래스는 현재 사용중인 Strategy 요소를 구현한 클래스 객체의 정보를 유지하며 Context 객체에 적절한 Strategy 객체를 설정하는 역할을 수행한다. 이러한 점이 스테이트 패턴과의 주요한 차이점이다.